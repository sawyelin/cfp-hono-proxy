name: Deploy Cloudflare Pages
run-name: Deploy CLoudflare Pages (${{ github.event.pull_request.head.sha }})


on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - src/**
  workflow_dispatch:


jobs:
  build:
    name: Build Hono Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
      - name: Setup environment
        uses: actions/setup-node@v4

      - name: Setup Cloudflare Temporaly Token
        uses: atolycs/cf-create-token@main
        id: cf-create-token
        with:
          token: ${{ secrets.CF_TOKEN }}
          account_id: ${{ secrets.CF_ACCOUNT_ID}}

      - name: Create Github Apps Token
        uses: atolycs/create-app-auth@v1
        id: gh_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}

      - name: checkout
        uses: actions/checkout@v4

      - name: cache check
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install
        run: npm ci

      - name: Check node modules
        run: npm ls

      - name: format
        run: "npm run biome:format"

      - name: Build
        run: npm run build

      - name: Deploy Production Pages
        uses: cloudflare/wrangler-action@v3
        id: cloudflare_pages_deploy
        with:
          apiToken: ${{ steps.cf-create-token.outputs.cf-token }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages deploy ./dist

      - name: Commit status
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.gh_token.outputs.token }}
          script: |
            const sha = context.payload.pull_request?.head.sha ?? context.sha;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              context: "Cloudflare Pages",
              description: "Launched Apps!",
              state: 'success',
              sha,
              target_url: '${{ steps.cloudflare_pages_deploy.outputs.deployment-url }}'
            });
